#!/bin/bash

# From https://github.com/networkimprov/omap3-usb-boot-install
#
# Install script to cold flash over USB using an image made of
# subimages for MLO, u-boot, script, dtb, zimage and initrd.
#
# If a sub-image is not specified, an empty one is created.
#
# This tool uses modified omap34usbboot.tar.gz that's available at:
# https://groups.google.com/forum/#!topic/pandaboard/9z5ebHEnuqs
#
# The MLO is generated by u-boot when it's compiled with:
# $ CONFIG_SPL=1 CROSS_COMPILE=arm-linux-gnueabi- make
#
# The u-boot install script is created from install.src with:
# $ mkimage -T script -C none -n "Install script" -d install.src u-boot.script
#
# The mkimage tool comes with u-boot or can be installed with
# u-boot-tools package.

SZ_512K=524288
SZ_1M=1048576
SZ_2M=2097152
SZ_8M=8388608
SZ_20M=20971520

update=0
install=0
dieid=""
rootfs_file=""

main() { #lb move main script here, invoke main at end
}

print_options() {
  echo "usage: $0 [-u | --update] [-i[rootfs.tar.gz] | --install[=rootfs.tar.gz]]"
}

check_options() {
  if [ $# -lt 1 ]; then
    print_options
    #lb exit 0
  fi

  if ! options=$(getopt -o ui:: -l update,install:: -- "$@"); then
    print_options
    exit 1
  fi

  eval set -- "$options"

  while [ $# -gt 0 ]; do
    case $1 in
    -u|--update)
      update=1
    ;;
    -i|--install)
      rootfs_file=$2
      install=1
      shift
    ;;
    (--)
      shift
      break
    ;;
    (-*)
      echo "Unknown option $1"
      exit 2
    ;;
    *)
      print_options
      exit 3
    ;;
    esac
    shift
  done
}

cold_flash() {
  if [ -f src/omap34usbboot/out/usbboot ]; then
    prefix=src/omap34usbboot/out #lb obsolete
  else
    arch=$(uname -m)
    case "$arch" in
    i?86)
      prefix=arch/i386
    ;;
    x86_64)
      prefix=arch/x86_64
    ;;
    *)
      echo "Unsupported architecture, please build src/omap34usbboot manually"
      exit 1
    ;;
    esac
  fi

  while read -r output; do
    echo $output
    if echo $output | grep "No such file or directory" > /dev/null; then
      exit 2
    fi 
    if echo $output | grep "command not found" > /dev/null; then
      exit 3
    fi 
    if echo $output | grep "unexpected 2ndstage response" > /dev/null; then
      exit 4
    fi 
    dieid=$(echo $output | awk '{ split($0,a,"dieid: "); print substr(a[2], 1, 32) }')
  done < <(sudo $prefix/usbboot $prefix/omap3_aboot install-image 2>&1)

  if [ "$dieid" = "" ]; then
    echo "ERROR: failed to get dieid"
    exit 5
  fi

  return 0
}

pad_image() {
  file="$1"
  pad_size="$2"

  if [ ! -f $file ]; then
    echo "Creating empty $file"
    touch $file
  fi

  size=$(du -b "$file" | cut -f 1)
  if [ $size -gt $pad_size ]; then
    echo "ERROR: $file too big"
    exit 1
  fi

  if [ $size -lt $pad_size ]; then
    echo "Padding $file from $size to $pad_size"
    if ! truncate -s $pad_size $file; then
      echo "ERROR: truncate failed for $file"
      exit 2
    fi
  fi
}

update_images() {

  if ! mkimage -A arm -T script -C none -n "Install script" -d boot.script boot.scr; then
    echo "ERRROR: could not mkimage install script"
    exit 3
  fi

  pad_image u-boot.bin $SZ_512K    # at 0x80008000
  pad_image MLO $SZ_512K           # at 0x80088000
  pad_image u-boot.img $SZ_512K    # at 0x80108000
  pad_image boot.scr $SZ_512K      # at 0x80188000
  pad_image dtb $SZ_2M             # at 0x80208000
  pad_image zimage $SZ_8M          # at 0x80408000
  pad_image initramfs $SZ_20M      # at 0x80c08000

  if ! cat u-boot.bin MLO u-boot.img boot.scr dtb zimage initramfs > install-image; then
    echo "ERROR: failed to create install image"
    exit 4
  fi

  return 0
}

wait_for_emmc() {
  emmc=$1
  timeout=45
  echo "Waiting for mass storage device $emmc"
  while [ 1 ]; do
    if [ -b $emmc ]; then
      break
    fi
    ((timeout--))
    if [ "$timeout" -lt "1" ]; then
      echo "ERROR: Timed out waiting for $emmc"
      exit 1
    fi
    sleep 1
  done

  echo "Found mass storage at $emmc"

  return 0
}

install_on_emmc() {
  dieid=$1
  emmc=$2
  rootfs=$3

  echo "Partitioning $emmc..."
  if ! sudo /sbin/parted --script $emmc mklabel msdos; then
    echo "ERROR: Could not mklabel"
    exit 1
  fi
  if ! sudo /sbin/parted --script $emmc mkpart primary fat32 2048s 128MB; then
    echo "ERROR: Could not add fat32 partition"
    exit 2
  fi
  if ! sudo /sbin/parted --script $emmc mkpart primary ext4 128MB 100%; then
    echo "ERROR: Could not add ext4 partition"
    exit 3
  fi

  echo "Formatting new partitions on $emmc..."
  if ! sudo mkfs.vfat $emmc-part1; then
    echo "ERROR: Could not mkfs.vfat"
    exit 4
  fi
  if ! sudo mkfs.ext4 $emmc-part2; then
    echo "ERROR: Could not mkfs.ext4"
    exit 5
  fi

  echo "Adding tmp directories for mounting vfat and ext4..."
  if ! vfat=$(mktemp -d /tmp/XXXXXXXX-$dieid-vfat); then
    echo "ERROR: Could not mktemp for vfat"
    exit 6
  fi
  if ! ext4=$(mktemp -d /tmp/XXXXXXXX-$dieid-ext4); then
    echo "ERROR: Could not mktemp for ext4"
    exit 7
  fi
  if ! sudo mount $emmc-part1 $vfat; then
    echo "ERROR: Could not mount vfat"
    exit 8
  fi
  echo "Mounted vfat to temporary location $vfat"
  if ! sudo mount $emmc-part2 $ext4; then
    echo "ERROR: Could not mount ext4"
    exit 9
  fi
  echo "Mounted ext4 to temporary location $ext4"

  #
  # REVISIT: Add copying of MLO and u-boot to $vfat here
  #

  echo "Untarring root file system to $ext4..."
  if ! sudo tar zxf $rootfs -C $ext4; then
    echo "ERROR: Untarring failed for $rootfs"
    exit 11
  fi

  echo "Syncing, unmounting and cleaning up tmp directories..."
  sync
  if ! sudo umount $ext4; then
    echo "ERROR: Could not umount ext4"
    exit 12
  fi
  if ! sudo umount $vfat; then
    echo "ERROR: Could not umount vfat"
    exit 13
  fi
  if ! rmdir $ext4; then
    echo "ERROR: Could not remove tmp dir for ext4"
    exit 14
  fi
  if ! rmdir $vfat; then
    echo "ERROR: Could not remove tmp dir for vfat"
    exit 15
  fi
}

#
# Main program
#

check_options $@

if [ "$update" == "1" ]; then
  echo "Update cold flash images..."
  if ! update_images; then
    echo "ERROR: Could not update images"
    exit 2
  fi
fi

if [ "$install" == "1" ]; then
  echo "Cold flashing over USB..."
  if ! cold_flash; then
    echo "ERROR: Could not cold flash"
    exit 3
  fi
fi

if [ "$install" == "1" ] && [ "$dieid" != "" ]; then #lb merge with above; dieid checked below

  # Final check for the dieid length to be 32
  if [ ${#dieid} != "32" ]; then
    echo "ERROR: Bad dieid $dieid ${#dieid}"
    exit 4
  fi

  disk_prefix="/dev/disk/by-id/usb-Linux_File-Stor_Gadget_" #lb clearer if on single line
  disk_postfix="-0:0"
  disk=$disk_prefix$dieid$disk_postfix
  if ! wait_for_emmc $disk; then #lb no error here?
    exit 5
  fi

  if [ "$rootfs_file" == "" ]; then
    echo "WARNING: No rootfs specified, assuming manual install"
    exit 6
  fi

  if [ ! -f $rootfs_file ]; then
    echo "ERROR: Could not find file (or absolute path) for rootfs $rootfs_file"
    exit 7
  fi

  if ! install_on_emmc $dieid $disk $rootfs_file; then #lb no error here?
    exit 8
  fi

  echo "Done, please power cycle the installed device"
fi

